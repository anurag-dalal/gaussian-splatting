    INFO: 2024-01-30 15:20:40,615:               log.py:   20: Logging to /home/anurag/codes/gaussian_splatting_kristian_fork/gaussian-splatting/mdpdf.log
   DEBUG: 2024-01-30 15:20:40,615:               cli.py:  103: /mnt/c/MyFiles/Codes/Statistics/R_Codes/Assignment2/readme.md
    INFO: 2024-01-30 15:20:40,618:         converter.py:   14: /mnt/c/MyFiles/Codes/Statistics/R_Codes/Assignment2/readme.md
   DEBUG: 2024-01-30 15:20:40,621:      pdf_renderer.py:  470: printSegment: This is a solution for 2 - Dropping dice
   DEBUG: 2024-01-30 15:20:40,623:      pdf_renderer.py:  470: printSegment: The data is recorded in dice
   DEBUG: 2024-01-30 15:20:40,623:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2024-01-30 15:20:40,624:      pdf_renderer.py:  470: printSegment: data.R 
   DEBUG: 2024-01-30 15:20:40,624:      pdf_renderer.py:  470: printSegment: [
   DEBUG: 2024-01-30 15:20:40,624:      pdf_renderer.py:  470: printSegment: Shared by 4 people
   DEBUG: 2024-01-30 15:20:40,624:      pdf_renderer.py:  470: printSegment: ]
   DEBUG: 2024-01-30 15:20:40,625:      pdf_renderer.py:  470: printSegment: For questions 2-8 the solution is 
   DEBUG: 2024-01-30 15:20:40,625:      pdf_renderer.py:  470: printSegment: soln
   DEBUG: 2024-01-30 15:20:40,626:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2024-01-30 15:20:40,626:      pdf_renderer.py:  470: printSegment: 1.R
   DEBUG: 2024-01-30 15:20:40,626:      pdf_renderer.py:  470: printSegment: library("readxl")
   DEBUG: 2024-01-30 15:20:40,627:      pdf_renderer.py:  470: printSegment: n = 30
   DEBUG: 2024-01-30 15:20:40,627:      pdf_renderer.py:  470: printSegment: my_data <-
   DEBUG: 2024-01-30 15:20:40,628:      pdf_renderer.py:  470: printSegment: read_excel("C:\\MyFiles\\Codes\\Statistics\\R_Codes\\Assignment2\\dice_data.xlsx", sheet=1)
   DEBUG: 2024-01-30 15:20:40,628:      pdf_renderer.py:  470: printSegment: my_data = my_data[1:n,]
   DEBUG: 2024-01-30 15:20:40,628:      pdf_renderer.py:  470: printSegment: # print(my_data)
   DEBUG: 2024-01-30 15:20:40,629:      pdf_renderer.py:  470: printSegment: x = my_data[,2]
   DEBUG: 2024-01-30 15:20:40,629:      pdf_renderer.py:  470: printSegment: y = my_data[,3]
   DEBUG: 2024-01-30 15:20:40,629:      pdf_renderer.py:  470: printSegment: z = my_data[,4]
   DEBUG: 2024-01-30 15:20:40,629:      pdf_renderer.py:  470: printSegment: # print(x)
   DEBUG: 2024-01-30 15:20:40,629:      pdf_renderer.py:  470: printSegment: # die data plot
   DEBUG: 2024-01-30 15:20:40,630:      pdf_renderer.py:  470: printSegment: die = data.frame(x, y,z)
   DEBUG: 2024-01-30 15:20:40,630:      pdf_renderer.py:  470: printSegment: colnames(die) <- c('x','y','z')
   DEBUG: 2024-01-30 15:20:40,630:      pdf_renderer.py:  470: printSegment: p1<-plot(die$x, die$y, col='#ff4d00', cex=3, lwd=2)
   DEBUG: 2024-01-30 15:20:40,631:      pdf_renderer.py:  470: printSegment: # 10  lines from 5 random measurement
   DEBUG: 2024-01-30 15:20:40,631:      pdf_renderer.py:  470: printSegment: for (i in 1:10){
   DEBUG: 2024-01-30 15:20:40,631:      pdf_renderer.py:  470: printSegment:     idx = sample(1:n,5)
   DEBUG: 2024-01-30 15:20:40,631:      pdf_renderer.py:  470: printSegment:     x5 = die$x[idx]
   DEBUG: 2024-01-30 15:20:40,631:      pdf_renderer.py:  470: printSegment:     y5 = die$y[idx]
   DEBUG: 2024-01-30 15:20:40,632:      pdf_renderer.py:  470: printSegment:     lMod5 = lm(y5~x5)
   DEBUG: 2024-01-30 15:20:40,632:      pdf_renderer.py:  470: printSegment:     #print(summary((lMod5)))
   DEBUG: 2024-01-30 15:20:40,632:      pdf_renderer.py:  470: printSegment:     p1<-abline(lMod5, col='blue')
   DEBUG: 2024-01-30 15:20:40,632:      pdf_renderer.py:  470: printSegment: }
   DEBUG: 2024-01-30 15:20:40,633:      pdf_renderer.py:  470: printSegment: # linear model from all the data
   DEBUG: 2024-01-30 15:20:40,633:      pdf_renderer.py:  470: printSegment: lModAll = lm(y~x,data = die)
   DEBUG: 2024-01-30 15:20:40,633:      pdf_renderer.py:  470: printSegment: p1<-abline(lModAll,col="maroon", lwd=4)
   DEBUG: 2024-01-30 15:20:40,633:      pdf_renderer.py:  470: printSegment: # second plot for residuals
   DEBUG: 2024-01-30 15:20:40,634:      pdf_renderer.py:  470: printSegment: p2<-plot(die$x, die$y, col='#ff4d00', cex=3, lwd=2)
   DEBUG: 2024-01-30 15:20:40,634:      pdf_renderer.py:  470: printSegment: p2<-abline(lModAll,col="blue", lwd=4)
   DEBUG: 2024-01-30 15:20:40,634:      pdf_renderer.py:  470: printSegment: p2<-segments(die$x,die$y,die$x,fitted(lModAll), col='orange')
   DEBUG: 2024-01-30 15:20:40,634:      pdf_renderer.py:  470: printSegment: # sum of square of residuals
   DEBUG: 2024-01-30 15:20:40,635:      pdf_renderer.py:  470: printSegment: SS_e = sum((lModAll$residuals)^2)
   DEBUG: 2024-01-30 15:20:40,635:      pdf_renderer.py:  470: printSegment: message(sprintf("Sum of squares of residuals = %s", SS_e))
   DEBUG: 2024-01-30 15:20:40,635:      pdf_renderer.py:  470: printSegment: # std error
   DEBUG: 2024-01-30 15:20:40,635:      pdf_renderer.py:  470: printSegment: S_e = sqrt(SS_e/(n-2))
   DEBUG: 2024-01-30 15:20:40,636:      pdf_renderer.py:  470: printSegment: message(sprintf("Standard Error = %s", S_e))
   DEBUG: 2024-01-30 15:20:40,636:      pdf_renderer.py:  470: printSegment: print(summary(lModAll))
   DEBUG: 2024-01-30 15:20:40,636:      pdf_renderer.py:  470: printSegment: The diagram is 
   DEBUG: 2024-01-30 15:20:40,637:      pdf_renderer.py:  470: printSegment: soln
   DEBUG: 2024-01-30 15:20:40,637:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2024-01-30 15:20:40,638:      pdf_renderer.py:  470: printSegment: 1.png
   DEBUG: 2024-01-30 15:20:40,638:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2024-01-30 15:20:40,640:      pdf_renderer.py:  235: /mnt/c/MyFiles/Codes/Statistics/R_Codes/Assignment2/soln_1.png, 800, 1200
   DEBUG: 2024-01-30 15:20:40,657:      pdf_renderer.py:  470: printSegment: Sample output:
   DEBUG: 2024-01-30 15:20:40,657:      pdf_renderer.py:  470: printSegment: Sum of squares of residuals = 3761.04483809524
   DEBUG: 2024-01-30 15:20:40,658:      pdf_renderer.py:  470: printSegment: Standard Error = 11.5897812719642
   DEBUG: 2024-01-30 15:20:40,658:      pdf_renderer.py:  470: printSegment: Call:
   DEBUG: 2024-01-30 15:20:40,658:      pdf_renderer.py:  470: printSegment: lm(formula = y ~ x, data = die)
   DEBUG: 2024-01-30 15:20:40,658:      pdf_renderer.py:  470: printSegment: Residuals:
   DEBUG: 2024-01-30 15:20:40,659:      pdf_renderer.py:  470: printSegment:     Min      1Q  Median      3Q     Max
   DEBUG: 2024-01-30 15:20:40,659:      pdf_renderer.py:  470: printSegment: -19.575  -7.004  -1.222   9.092  22.925
   DEBUG: 2024-01-30 15:20:40,660:      pdf_renderer.py:  470: printSegment: Coefficients:
   DEBUG: 2024-01-30 15:20:40,660:      pdf_renderer.py:  470: printSegment:             Estimate Std. Error t value Pr(>|t|)
   DEBUG: 2024-01-30 15:20:40,660:      pdf_renderer.py:  470: printSegment: (Intercept)  12.7918     7.1355   1.793   0.0838 .
   DEBUG: 2024-01-30 15:20:40,661:      pdf_renderer.py:  470: printSegment: x             2.4071     0.2478   9.714 1.82e-10 ***
   DEBUG: 2024-01-30 15:20:40,661:      pdf_renderer.py:  470: printSegment: ---
   DEBUG: 2024-01-30 15:20:40,661:      pdf_renderer.py:  470: printSegment: Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
   DEBUG: 2024-01-30 15:20:40,661:      pdf_renderer.py:  470: printSegment: Residual standard error: 11.59 on 28 degrees of freedom
   DEBUG: 2024-01-30 15:20:40,662:      pdf_renderer.py:  470: printSegment: Multiple R-squared:  0.7712,    Adjusted R-squared:  0.763
   DEBUG: 2024-01-30 15:20:40,662:      pdf_renderer.py:  470: printSegment: F-statistic: 94.36 on 1 and 28 DF,  p-value: 1.82e-10
   DEBUG: 2024-01-30 15:20:40,662:      pdf_renderer.py:  470: printSegment: For questions 9 the solution is 
   DEBUG: 2024-01-30 15:20:40,662:      pdf_renderer.py:  470: printSegment: soln
   DEBUG: 2024-01-30 15:20:40,663:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2024-01-30 15:20:40,663:      pdf_renderer.py:  470: printSegment: 2.R
   DEBUG: 2024-01-30 15:20:40,663:      pdf_renderer.py:  470: printSegment: library("readxl")
   DEBUG: 2024-01-30 15:20:40,664:      pdf_renderer.py:  470: printSegment: n = 30
   DEBUG: 2024-01-30 15:20:40,664:      pdf_renderer.py:  470: printSegment: my_data <-
   DEBUG: 2024-01-30 15:20:40,665:      pdf_renderer.py:  470: printSegment: read_excel("C:\\MyFiles\\Codes\\Statistics\\R_Codes\\Assignment2\\dice_data.xlsx", sheet=1)
   DEBUG: 2024-01-30 15:20:40,665:      pdf_renderer.py:  470: printSegment: my_data = my_data[1:n,]
   DEBUG: 2024-01-30 15:20:40,665:      pdf_renderer.py:  470: printSegment: # print(my_data)
   DEBUG: 2024-01-30 15:20:40,665:      pdf_renderer.py:  470: printSegment: x = my_data[,2]
   DEBUG: 2024-01-30 15:20:40,666:      pdf_renderer.py:  470: printSegment: y = my_data[,3]
   DEBUG: 2024-01-30 15:20:40,666:      pdf_renderer.py:  470: printSegment: z = my_data[,4]
   DEBUG: 2024-01-30 15:20:40,666:      pdf_renderer.py:  470: printSegment: # print(x)
   DEBUG: 2024-01-30 15:20:40,666:      pdf_renderer.py:  470: printSegment: # die data plot
   DEBUG: 2024-01-30 15:20:40,667:      pdf_renderer.py:  470: printSegment: die = data.frame(x, z,y)
   DEBUG: 2024-01-30 15:20:40,667:      pdf_renderer.py:  470: printSegment: colnames(die) <- c('x','y','z')
   DEBUG: 2024-01-30 15:20:40,667:      pdf_renderer.py:  470: printSegment: p1<-plot(die$x, die$y, col='#ff4d00', cex=3, lwd=2)
   DEBUG: 2024-01-30 15:20:40,667:      pdf_renderer.py:  470: printSegment: # 10  lines from 5 random measurement
   DEBUG: 2024-01-30 15:20:40,668:      pdf_renderer.py:  470: printSegment: for (i in 1:10){
   DEBUG: 2024-01-30 15:20:40,668:      pdf_renderer.py:  470: printSegment:     idx = sample(1:n,5)
   DEBUG: 2024-01-30 15:20:40,668:      pdf_renderer.py:  470: printSegment:     x5 = die$x[idx]
   DEBUG: 2024-01-30 15:20:40,668:      pdf_renderer.py:  470: printSegment:     y5 = die$y[idx]
   DEBUG: 2024-01-30 15:20:40,668:      pdf_renderer.py:  470: printSegment:     lMod5 = lm(y5~x5)
   DEBUG: 2024-01-30 15:20:40,669:      pdf_renderer.py:  470: printSegment:     #print(summary((lMod5)))
   DEBUG: 2024-01-30 15:20:40,669:      pdf_renderer.py:  470: printSegment:     p1<-abline(lMod5, col='blue')
   DEBUG: 2024-01-30 15:20:40,669:      pdf_renderer.py:  470: printSegment: }
   DEBUG: 2024-01-30 15:20:40,669:      pdf_renderer.py:  470: printSegment: # linear model from all the data
   DEBUG: 2024-01-30 15:20:40,670:      pdf_renderer.py:  470: printSegment: lModAll = lm(y~x,data = die)
   DEBUG: 2024-01-30 15:20:40,670:      pdf_renderer.py:  470: printSegment: p1<-abline(lModAll,col="maroon", lwd=4)
   DEBUG: 2024-01-30 15:20:40,670:      pdf_renderer.py:  470: printSegment: # second plot for residuals
   DEBUG: 2024-01-30 15:20:40,671:      pdf_renderer.py:  470: printSegment: p2<-plot(die$x, die$y, col='#ff4d00', cex=3, lwd=2)
   DEBUG: 2024-01-30 15:20:40,671:      pdf_renderer.py:  470: printSegment: p2<-abline(lModAll,col="blue", lwd=4)
   DEBUG: 2024-01-30 15:20:40,671:      pdf_renderer.py:  470: printSegment: p2<-segments(die$x,die$y,die$x,fitted(lModAll), col='orange')
   DEBUG: 2024-01-30 15:20:40,671:      pdf_renderer.py:  470: printSegment: # sum of square of residuals
   DEBUG: 2024-01-30 15:20:40,672:      pdf_renderer.py:  470: printSegment: SS_e = sum((lModAll$residuals)^2)
   DEBUG: 2024-01-30 15:20:40,672:      pdf_renderer.py:  470: printSegment: message(sprintf("Sum of squares of residuals = %s", SS_e))
   DEBUG: 2024-01-30 15:20:40,672:      pdf_renderer.py:  470: printSegment: # std error
   DEBUG: 2024-01-30 15:20:40,672:      pdf_renderer.py:  470: printSegment: S_e = sqrt(SS_e/(n-2))
   DEBUG: 2024-01-30 15:20:40,673:      pdf_renderer.py:  470: printSegment: message(sprintf("Standard Error = %s", S_e))
   DEBUG: 2024-01-30 15:20:40,673:      pdf_renderer.py:  470: printSegment: print(summary(lModAll))
   DEBUG: 2024-01-30 15:20:40,673:      pdf_renderer.py:  470: printSegment: The diagram is 
   DEBUG: 2024-01-30 15:20:40,673:      pdf_renderer.py:  470: printSegment: soln
   DEBUG: 2024-01-30 15:20:40,674:      pdf_renderer.py:  470: printSegment: _
   DEBUG: 2024-01-30 15:20:40,674:      pdf_renderer.py:  470: printSegment: 2.png
   DEBUG: 2024-01-30 15:20:40,674:      pdf_renderer.py:  470: printSegment: <br>
   DEBUG: 2024-01-30 15:20:40,674:      pdf_renderer.py:  470: printSegment: <br>
   DEBUG: 2024-01-30 15:20:40,674:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2024-01-30 15:20:40,679:      pdf_renderer.py:  235: /mnt/c/MyFiles/Codes/Statistics/R_Codes/Assignment2/soln_2.png, 800, 1200
   DEBUG: 2024-01-30 15:20:40,691:      pdf_renderer.py:  470: printSegment: Sample output:
   DEBUG: 2024-01-30 15:20:40,691:      pdf_renderer.py:  470: printSegment: Sum of squares of residuals = 79.8209523809524
   DEBUG: 2024-01-30 15:20:40,692:      pdf_renderer.py:  470: printSegment: Standard Error = 1.68841591419879
   DEBUG: 2024-01-30 15:20:40,692:      pdf_renderer.py:  470: printSegment: Call:
   DEBUG: 2024-01-30 15:20:40,692:      pdf_renderer.py:  470: printSegment: lm(formula = y ~ x, data = die)
   DEBUG: 2024-01-30 15:20:40,693:      pdf_renderer.py:  470: printSegment: Residuals:
   DEBUG: 2024-01-30 15:20:40,693:      pdf_renderer.py:  470: printSegment:     Min      1Q  Median      3Q     Max
   DEBUG: 2024-01-30 15:20:40,693:      pdf_renderer.py:  470: printSegment: -3.1276 -2.0233  0.5038  1.3981  2.1352
   DEBUG: 2024-01-30 15:20:40,694:      pdf_renderer.py:  470: printSegment: Coefficients:
   DEBUG: 2024-01-30 15:20:40,694:      pdf_renderer.py:  470: printSegment:             Estimate Std. Error t value Pr(>|t|)
   DEBUG: 2024-01-30 15:20:40,694:      pdf_renderer.py:  470: printSegment: (Intercept)  2.28762    1.03950   2.201   0.0362 *
   DEBUG: 2024-01-30 15:20:40,694:      pdf_renderer.py:  470: printSegment: x            0.05257    0.03610   1.456   0.1564
   DEBUG: 2024-01-30 15:20:40,695:      pdf_renderer.py:  470: printSegment: ---
   DEBUG: 2024-01-30 15:20:40,695:      pdf_renderer.py:  470: printSegment: Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
   DEBUG: 2024-01-30 15:20:40,695:      pdf_renderer.py:  470: printSegment: Residual standard error: 1.688 on 28 degrees of freedom
   DEBUG: 2024-01-30 15:20:40,695:      pdf_renderer.py:  470: printSegment: Multiple R-squared:  0.07041,   Adjusted R-squared:  0.03721
   DEBUG: 2024-01-30 15:20:40,696:      pdf_renderer.py:  470: printSegment: F-statistic: 2.121 on 1 and 28 DF,  p-value: 0.1564
   DEBUG: 2024-01-30 15:20:40,696:      pdf_renderer.py:  470: printSegment: Solution to 9:
   DEBUG: 2024-01-30 15:20:40,696:      pdf_renderer.py:  470: printSegment: What would you characterize as the biggest difference between the (x, y) regression
   DEBUG: 2024-01-30 15:20:40,696:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2024-01-30 15:20:40,697:      pdf_renderer.py:  470: printSegment: and the (x, z) regression? Do in
   DEBUG: 2024-01-30 15:20:40,698:      pdf_renderer.py:  470: printSegment: particular have a look at the summary table of the
   DEBUG: 2024-01-30 15:20:40,698:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2024-01-30 15:20:40,698:      pdf_renderer.py:  470: printSegment: output of lm.
   ERROR: 2024-01-30 15:20:40,698:      pdf_renderer.py:  217: /mnt/c/MyFiles/Codes/Statistics/R_Codes/Assignment2/readme.md:158: Empty heading
   ERROR: 2024-01-30 15:20:40,698:      pdf_renderer.py:  217: /mnt/c/MyFiles/Codes/Statistics/R_Codes/Assignment2/readme.md:158: Empty heading
   DEBUG: 2024-01-30 15:20:40,699:      pdf_renderer.py:  470: printSegment: For (x, y) there is a strong corelation the  distance traveled by the dice (y) increases sharply as the height from which
   DEBUG: 2024-01-30 15:20:40,699:      pdf_renderer.py:  470: printSegment: it is dropped (x) increases.
   DEBUG: 2024-01-30 15:20:40,700:      pdf_renderer.py:  470: printSegment: Whereas, for (x, z) there is no corelation, the linear model fits the expected value of 3.5 so we see the linear model
   DEBUG: 2024-01-30 15:20:40,701:      pdf_renderer.py:  470: printSegment: going from 3 to 4.
   DEBUG: 2024-01-30 15:20:40,702:      pdf_renderer.py:   53: 0, [2, 'This is a solution for 2 - Dropping dice', 1, 70.0]
   DEBUG: 2024-01-30 15:20:40,702:      pdf_renderer.py:   53: 1, [3, 'For questions 2-8 the solution is ', 1, 121.19999999999999]
   DEBUG: 2024-01-30 15:20:40,702:      pdf_renderer.py:   53: 2, [3, 'Sample output:', 3, 164.4]
   DEBUG: 2024-01-30 15:20:40,702:      pdf_renderer.py:   53: 3, [3, 'For questions 9 the solution is ', 3, 397.2]
   DEBUG: 2024-01-30 15:20:40,702:      pdf_renderer.py:   53: 4, [3, 'Sample output:', 6, 164.4]
   DEBUG: 2024-01-30 15:20:40,702:      pdf_renderer.py:   53: 5, [2, 'Solution to 9:', 6, 397.6]
   ERROR: 2024-01-30 15:20:40,702:      pdf_renderer.py:   57: Bad heading level.  More information:
Traceback (most recent call last):
  File "/home/anurag/miniconda3/envs/dl/lib/python3.10/site-packages/mdpdf/pdf_renderer.py", line 55, in __del__
    self.doc.set_toc(self.toc)
  File "/home/anurag/miniconda3/envs/dl/lib/python3.10/site-packages/fitz/utils.py", line 1328, in set_toc
    raise ValueError("hierarchy level of item 0 must be 1")
ValueError: hierarchy level of item 0 must be 1
    INFO: 2024-01-30 15:20:40,703:      pdf_renderer.py:   59: [3, 'For questions 2-8 the solution is ', 1, 121.19999999999999]
